<sect1 id="zym.notification">
  <title>Zym_Notification</title>

  <para>
    <code>Zym_Notification</code> provides an infrastructure to relay messages between objects that don't necessarily know eachother.
    This provides a loose coupling between components and makes your app more flexible.
  </para>

  <sect2 id="zym.notification.registering">
	  <title>(Un)registering to a notification</title>

	  <para>Registering to a notification is done at <code>Zym_Notification</code>:</para>

	  <programlisting role="php"><![CDATA[
$notification = Zym_Notification::get();
$notification->attach($theReceivingObject, ‘testEvent’);
]]></programlisting>

	  <para>In this snippet an object is attached to the testEvent notification.
	  All posts that are sent to the ‘testEvent’ notification will be passed to
	  the $receivingObject. By default the notifications will be posted to the
	  notify() method. An optional third parameter in the attach() method allows
	  you to use a custom method.</para>

	  <programlisting role="php"><![CDATA[
$notification = Zym_Notification::get();
$notification->attach($theReceivingObject, ‘testEvent’, ‘customMethod’);
]]></programlisting>

	  <para>In this case, all ‘testEvent’ notifications will be posted to the
	  customMethod() method in $theReceivingObject. There is a special attach
	  method called attachCatchAll(). An object that is registered to the
	  catch-all will receive all notifications. If you want to unregister an
	  object from the notification center you can call the detach() method. This
	  method takes one mandatory and one optional argument. The first argument is
	  the object you want to detach. The second, optional, argument is the
	  notification that you want to detach the object from. If the second argument
	  is left blank, the notification center will remove the object from all
	  notifications. Don’t forget to detach an object when it’s destroyed! See the next section for an example
	  of how to make sure this gets done. Receiving a notification By default the
	  notifications are sent to the notify() method of the receiver.</para>

	  <programlisting role="php"><![CDATA[
class MyClass
{
  protected $_notification= null;

  public function __construct()
  {
    $this->_notification = Zym_Notification::get();
    $this->_notification->attach($this, 'testEvent');
  }

  public function __destruct()
  {
    $this->_notification->detach($this);
  }

  public function notify(Zym_Notification $notification)
  {
    if ('testEvent' == $notification->getName()) {
      Zend_Registry::get('log')->log('testEvent was triggered and received by MyClass!');
    }
  }
}
]]></programlisting>

	  <para>In the example above the MyClass instance is automatically registered
	  to the ‘testEvent’ notification at instantiation. If and when the
	  ‘testEvent’ notification is sent, the notify() method will receive it so it
	  can be processed. Note the __destruct() method which explicitly detaches the
	  object from the notification center.</para>
	</sect2>
</sect1>