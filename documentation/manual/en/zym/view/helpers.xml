<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en" xml:id="zym.view.helpers" version="5.0">
    <title>View Helpers</title>

    <para>
        Zym provides view helpers under the <classname>Zym_View_Helper_*</classname>
        prefix.
    </para>
    
    <section xml:id="zym.view.helpers.getrequest">
        <title>GetRequest Helper</title>
        
        <para>
            The helper allows access to the request object (<classname>Zend_Controller_Response_Abstract</classname>) available within 
            <classname>Zend_Controller_Front</classname>. Retrieving the request
            object in the view is not recommended; however, this helper is provided
            as a convince.
        </para>
        
        <itemizedlist>
            <listitem><para>getRequest()</para></listitem>
        </itemizedlist>
    </section>
    
    <section xml:id="zym.view.helpers.getresponse">
        <title>GetResponse Helper</title>
        
        <para>
            Allows access to the response object (<classname>Zend_Controller_Response_Abstract</classname>) within 
            <classname>Zend_Controller_Front</classname>.
        </para>
        
        <itemizedlist>
            <listitem><para>getResponse()</para></listitem>
        </itemizedlist>        
    </section>
    
    <section xml:id="zym.view.helpers.getsession">
        <title>GetSession Helper</title>
        
        <para>
            This helper returns a <classname>Zend_Session_Namespace</classname>.
            A session should be started if <classname>Zend_Session</classname>
            strict is set. See <classname>Zend_Session_Namespace</classname> documentation
            for usage. (hint: usage is similar to it)
        </para>
        
        <itemizedlist>
            <listitem><para>getSession($namespace = 'Default', $singleInstance = false)</para></listitem>
        </itemizedlist>
    </section>
    
    <section xml:id="zym.view.helpers.navigation">
        <title>Navigation Helpers</title>
        
        <para>
            The navigation helpers are used for rendering navigational elements
            from <link xlink:href="#zym.navigation.containers">Zym_Navigation_Container</link>
            instances.
        </para>
        
        <para>
            There are 5 built-in helpers:
            
	        <itemizedlist>
	            <listitem>
	                <para>
	                    <link xlink:href="#zym.view.helpers.navigation.breadcrumbs">Breadcrumbs</link>,
	                    used for rendering the path to the currently active page.
	                </para>
	            </listitem>
                <listitem>
                    <para>
                        <link xlink:href="#zym.view.helpers.navigation.links">Links</link>,
                        used for rendering navigational head links (e.g.
                        <code>&lt;link rel="next" href="..." /&gt;</code>)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link xlink:href="#zym.view.helpers.navigation.menu">Menu</link>,
                        used for rendering menus.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link xlink:href="#zym.view.helpers.navigation.sitemap">Sitemap</link>,
                        used for rendering sitemaps conforming to the 
                        <link xlink:href="http://www.sitemaps.org/protocol.php">Sitemaps XML format</link>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link xlink:href="#zym.view.helpers.navigation.navigation">Navigation</link>,
                        used for proxying calls to other navigational helpers.
                    </para>
                </listitem>
	        </itemizedlist>
	        
	        All built-in helpers extend 
	        <classname>Zym_View_Helper_Navigation_Abstract</classname>, which
	        adds integration with ACL and translation. The abstract class
	        implements the interface 
	        <classname>Zym_View_Helper_Navigation_Interface</classname>, which
	        defines the following methods:
	        
	        <itemizedlist>
               <listitem>
                   <para>
                       <code>{get|set}Container()</code> gets/sets the navigation 
                       container the helper should operate on by default, and
                       <code>hasContainer()</code> checks if the helper
                       has container registered.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}Translator()</code> gets/sets the 
                       translator used for translating labels and titles, and 
                       <code>{get|set}UseTranslator()</code> controls whether 
                       the translator should be enabled. The method
                       <code>hasTranslator()</code> checks if the helper has
                       a translator registered.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}Acl()</code>, <code>{get|set}Role()</code>,
                       gets/sets ACL instance and role used for filtering out 
                       pages when rendering, and <code>{get|set}UseAcl()</code>
                       controls whether ACL should be enabled. The methods
                       <code>hasAcl()</code> and <code>hasRole()</code> checks
                       if the helper has any ACL instances or roles registered.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>__toString()</code> magic method to ensure that
                       helpers can be rendered by <code>echo</code>ing the
                       helper instance directly.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>render($container)</code>, must be implemented by 
                       concrete helpers to do the actual rendering.
                   </para>
               </listitem>
	        </itemizedlist>
	        
	        In addition to the method stubs from the interface, the abstract
	        class implements the following methods:
	        
	        <itemizedlist>
               <listitem>
                   <para>
                       <code>{get|set}Indent()</code> gets/set indentation.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>__call()</code> is used for proxying calls to the
                       container registered in the helper, which means you can
                       call methods on a helper as if it was a container.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>findActive()</code> is used for finding the deepest
                       active page in a container.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>accept()</code> is used for determining if a page
                       should be accepted when iterating containers. This method
                       checks for page visibility and verifies that the helper's
                       role is allowed access to the page's resource/privilege.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>static setDefaultAcl()</code> is used for setting
                       a defualt ACL object that will be used by helpers.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>static setDefaultRole()</code> is used for setting
                       a default ACL that will be used by helpers
                   </para>
               </listitem>
	        </itemizedlist>
        </para>
        
        <para>
            If a navigation container is not explicitly set in a helper using
            <code>$helper->setContainer($nav)</code>, the helper will look
            for a container instance with the key <code>Zym_Navigation</code> in
            <classname>Zend_Registry</classname>.
            If a navigation container is not explicitly set or injected to the 
            helper, the helper will create an empty <classname>Zym_Navigation</classname>
            container when calling <code>$helper->getContainer()</code>.
        </para>
    
        <example xml:id="zym.view.helpers.navigation.proxy.example">
            <title>Proxying calls to the navigation container</title>
        
            <para>
                Navigation view helpers use the magic method <code>__call()</code>
                to proxy method calls to the navigation container that is
                registered in the view helper.
            </para>
            
            <programlisting role="php"><xi:include href="helpers/example/navigation/proxy.php" parse="text" /></programlisting>
            
            <para>
                The call above will add a page to the container in the
                <classname>Navigation</classname> helper.
            </para>
        </example>
        
        <section xml:id="zym.view.helpers.navigation.i18n">
            <title>Integration with Zend_Translate</title>
        
            <para>
                The navigation helpers support translating of page labels and titles.
                You can set a translator of type <classname>Zend_Translate</classname>
                or <classname>Zend_Translate_Adapter</classname> in the helper using
                <code>$helper->setTranslator($translator)</code>, or like with other
                I18n-enabled components; by adding the translator to
                <classname>Zend_Registry</classname> using the key
                <code>Zend_Translate</code>, in which case it will be found by the
                helpers.
            </para>
            
            <para>
                If you want to disable translation, use <code>$helper->setUseTranslator(false)</code>.
            </para>
            
            <note>
                <para>
                    There is no translation in the sitemap helper, since there
                    are no page labels or titles involved in an XML sitemap.
                </para>
            </note>
        </section>
        
        <section xml:id="zym.view.helpers.navigation.acl">
            <title>Integration with ACL</title>
            
            <para>
                All navigation view helpers support ACL inherently from the
                class <classname>Zym_View_Helper_Navigation_Abstract</classname>.
                A <classname>Zend_Acl</classname> object can be assigned to
                a helper instance with <code>$helper->setAcl($acl)</code>,
                where <code>$helper</code> refers to an instance of a helper,
                and <code>$acl</code> is an ACL instance containing roles
                and possibly resources. The helpers can be assigned a role 
                to use when iterating pages, by doing 
                <code>$helper->setRole('member')</code> to set a role id, or 
                <code>$helper->setRole(new Zend_Acl_Role('member'))</code> to set
                an instance. If ACL is used in the helper, the role in the
                helper must have rights for the page's resource and/or privilege
                to be included in a menu/breadcrumb/sitemap.
            </para>
            
            <para>
                The examples below all show how ACL affects rendering. 
            </para>
        </section>
    
        <section xml:id="zym.view.helpers.navigation.setup">
            <title>Navigation setup used in examples</title>
            
            <para>
                This shows an example setup of a navigation container —
                including routes and ACL — that is used in the examples
                below.
            </para>
            
            <para>
                Notes on the setup:
                <itemizedlist>
                    <listitem>
                        <para>
                            There are 3 active pages. The deepest active page
                            that is not filtered out should be used as the
                            currently active page in the helpers. In this case,
                            that is the page labeled <code>Page 4.1.1</code>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The pages labeled <code>Zym</code> and 
                            <code>Page0?</code> have the <code>order</code>
                            option set.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The pages labeled <code>Page 5</code> and all
                            child pages should be left out of iteration because
                            it is invisible.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The pages labeled <code>ACL Page 1</code> and
                            <code>ACL Page 2</code> have resources/prvileges 
                            associated with them.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            
            <programlisting role="php"><xi:include href="helpers/example/navigation/setup.php" parse="text" /></programlisting>
        </section>
        
        <section xml:id="zym.view.helpers.navigation.breadcrumbs">
            <title>Breadcrumbs Helper</title>
            
            <para>
                Breadcrumbs are used to indicate where in a sitemap
                a user is currently browsing, and are typically rendered
                like this: "You are here: Home > Products > FantasticProduct 1.0".
                The breadcrumbs helper follows the guidelines from
                <link xlink:href="http://developer.yahoo.com/ypatterns/pattern.php?pattern=breadcrumbs">Breadcrumbs Pattern - Yahoo! Design Pattern Library</link>,
                and allows simple customization (set indentation, another
                separator, and whether the last element should be linked), or
                rendering using a partial view script.  
            </para>
            
            <para>
                The breadcrumbs helper works like this; it finds the deepest active
                page in a navigation container, and renders an upwards path to
                the root. For MVC pages, the "activeness" of a page is
                determined by inspecting the request object, as stated in the
                section on <link xlink:href="#zym.navigation.pages.mvc">Zym_Navigation_Page_Mvc</link>.
            </para>
            
            <para>
                Methods in the breadcrumbs helper:
            </para>
            
            <itemizedlist>
               <listitem>
                   <para>
                       <code>{get|set}Separator()</code> gets/sets separator
                       string that is used between breadcrumbs. Defualt is
                       <code>' &amp;gt; '</code>.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}MinDepth()</code> gets/sets the minimum
                       depth required for breadcrumbs to render. Default is 
                       <code>1</code>, meaning breadcrumbs will not be rendered 
                       when a "root" page is active.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}LinkLast()</code> gets/sets whether the
                       last breadcrumb should be rendered as an anchor or not.
                       Default is <code>false</code>.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}Partial()</code> gets/sets a partial view
                       script that should be used for rendering breadcrumbs.
                       If a partial view script is set, the helper's 
                       <code>render()</code> method will use the 
                       <code>renderPartial()</code> method. If no partial is
                       set, the <code>renderStraight()</code> method is used.
                       The helper expects the partial to be a <code>string</code>
                       or an <code>array</code> with two elements. If the partial
                       is a <code>string</code>, it denotes the name of the partial
                       script to use. If it is an <code>array</code>, the first
                       element will be used as the name of the partial view 
                       script, and the second element is the module where the
                       script is found.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>renderStraight()</code> is the default render
                       method.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>renderPartial()</code> is used for rendering 
                       using a partial view script.
                   </para>
               </listitem>
           </itemizedlist>
    
            <example xml:id="zym.view.helpers.navigation.breadcrumbs.example1">
                <title>Rendering breadcrumbs</title>
                
                <para>
                    This example shows how to render breadcrumbs with default
                    settings.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/breadcrumbs_1.php" parse="text" /></programlisting>
                
                <note>
                    <para>
	                    The reason it doesn't output
	                    <code>Page 5 > Page 5.1 > Page 5.1.1 > Page 5.12</code> 
	                    is because <code>Page 5</code> is not visible, and is 
	                    filtered out when the helper iterates the container.
                    </para>
                </note>
            </example>
    
            <example xml:id="zym.view.helpers.navigation.breadcrumbs.example2">
                <title>Rendering customized breadcrumbs</title>
                
                <para>
                    This example shows how to render breadcrumbs with 
                    customized settings.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/breadcrumbs_2.php" parse="text" /></programlisting>
            </example>
    
            <example xml:id="zym.view.helpers.navigation.breadcrumbs.example3">
                <title>Rendering breadcrumbs using a partial view script</title>
                
                <para>
                    This example shows how to render customized breadcrumbs using
                    a partial vew script. By calling <code>setPartial()</code>,
                    you can specify a partial view script that will be used
                    when calling <code>render()</code>. When a partial is specified,
                    the <code>renderPartial()</code> method will be called. This
                    method will find the deepest active page and pass an array
                    of pages that leads to the active page to the partial view
                    script.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/breadcrumbs_3.php" parse="text" /></programlisting>
            </example>
        </section>
        
        <section xml:id="zym.view.helpers.navigation.links">
            <title>Links Helper</title>
            
            <para>
                The links helper is used for rendering HTML <code>LINK</code>
                elements. Links are used for describing document relationships
                of the currently active page. Read more about links and link
                types at <link xlink:href="http://www.w3.org/TR/html4/struct/links.html#h-12.3">HTML4 W3C Rec., 12.3 Document relationships: the LINK element</link>
                and <link xlink:href="http://www.w3.org/TR/html4/types.html#h-6.12">HTML4 W3C Rec., 6.12 Link types</link>.
            </para>
            
            <para>
                There are two types of relations; forward and reverse, indicated
                by the keyords <code>'rel'</code> and <code>'rev'</code>. Most
                methods in the links helper take a <code>$rel</code> param, which
                must be either <code>'rel'</code> or <code>'rev'</code>.
            </para>
            
            <para>
                Most methods also take a <code>$type</code> param, which is used
                for specifying the link type (e.g. start, next, prev).
            </para>
            
            <para>
                Relationships can be added to page objects manually, or found
                by traversing the container registered in the helper. The method
                <code>findRelation($page, $rel, $type)</code> will first try
                to find the given <code>$rel</code> of <code>$type</code> from 
                the <code>$page</code> by calling <code>$page->findRel($type)</code>
                or <code>$page->findRel($type)</code>. If the <code>$page</code>
                has a relation that can be converted to a page instance, that
                relation will be used. If the <code>$page</code> instance doesn't
                have the specified <code>$type</code>, the helper will look for
                a method in the helper named <code>search$rel$type</code> (e.g.
                <code>searchRelNext()</code> or <code>searchRevAlternate()</code>).
                If such a method exists, it will be used for determining the
                <code>$page</code>'s relation by traversing the container.
            </para>
            
            <note>
                <para>
                    When looking for relations in the the page instance 
                    (<code>$page->getRel($type)</code> or 
                    <code>$page->getRev($type)</code>), the helper accepts the 
                    values of type <code>string</code>, <code>array</code>,
                    <classname>Zend_Config</classname>, or 
                    <classname>Zym_Navigation_Page</classname>. If a string
                    is found, it will be converted to a 
                    <classname>Zym_Navigation_Page_Uri</classname>. If an array
                    or a config is found, it will be converted to an array of
                    page instances. If the first key of the array/config is numeric,
                    it will be considered to contain several pages, and each
                    element will be passed to the 
                    <link xlink:href="#zym.navigation.page.factory">page factory</link>.
                    If the first key is not numeric, the array/config will be
                    passed to the page factory directly.
                </para>
            </note>
            
            <para>
                The helper also supports magical finder methods for relations.
                E.g. to find forward alternate relations, call 
                <code>$helper->findRelAlternate($page)</code>, and to find
                reverse section relations, call
                <code>$helper->findRevSection($page)</code>. Those calls correspond
                to <code>$helper->findRelation($page, 'rel', 'alternate');</code>
                and <code>$helper->findRelation($page, 'rev', 'section');</code>
                respectively.
            </para>
            
            <para>
                To customize which relations that should be rendered, the helper
                uses a render flag, which is an integer value that will be
                used in bitwise <code>and</code> against render flags to
                determine which relations to find and render, much like the
                <code>error_reporting</code> in PHP. To set a render flag, you
                should use the render constants defined in the helper. Those can
                be combined with bitwise operators to specify exactly which
                relations to render. Below is a list of render constants.
            </para>
            
            <para>
                <itemizedlist>
                    <listitem>
                        <para><code>RENDER_ALTERNATE</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_STYLESHEET</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_START</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_NEXT</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_PREV</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_CONTENTS</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_INDEX</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_GLOSSARY</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_COPYRIGHT</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_CHAPTER</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_SECTION</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_SUBSECTION</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_APPENDIX</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_HELP</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_BOOKMARK</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_CUSTOM</code></para>
                    </listitem>
                    <listitem>
                        <para><code>RENDER_ALL</code></para>
                    </listitem>
                </itemizedlist>
            </para>
            
            <para>
                The constants from <code>RENDER_ALTERNATE</code> to 
                <code>RENDER_BOOKMARK</code> denote standard HTML link types.
                <code>RENDER_CUSTOM</code> denotes non-standard relations that
                specified in pages. <code>RENDER_ALL</code> denotes standard and
                non-standard relations.
            </para>
            
            <para>
                Methods in the links helper:
            </para>
            
            <itemizedlist>
               <listitem>
                   <para>
                       <code>{get|set}RenderFlag()</code> gets/sets the render
                       flag. Default is <code>RENDER_ALL</code>. See examples
                       below on how to set the render flag.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>findAllRelations()</code> finds all relations of
                       all types for a given page.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>findRelation()</code> finds all relations of a given
                       type from a given page.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>searchRel{Start|Next|Prev|Chapter|Section|Subsection}()</code>
                       traverses a container to find forward relations to
                       the start page, the next page, the previous page, 
                       chapters, sections, and subsections. 
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>searchRev{Section|Subsection}()</code> traverses
                       a container to find reverse relations to sections or
                       subsections.  
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>renderLink()</code> renders a single <code>link</code>
                       element.
                   </para>
               </listitem>
           </itemizedlist>
    
            <example xml:id="zym.view.helpers.navigation.links.example1">
                <title>Specify relations in pages</title>
                
                <para>
                    This example shows how to specify relations in pages.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/links_1.php" parse="text" /></programlisting>
            </example>
    
            <example xml:id="zym.view.helpers.navigation.links.example2">
                <title>Default rendering of links</title>
                
                <para>
                    This example shows how to render a menu from a container
                    registered/found in the view helper. Notice how pages 
                    are filtered out based on visibility and ACL.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/links_2.php" parse="text" /></programlisting>
            </example>
    
            <example xml:id="zym.view.helpers.navigation.links.example3">
                <title>Specify which relations to render</title>
                
                <para>
                    This example shows how to specify which relations to find
                    and render.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/links_3.php" parse="text" /></programlisting>
            </example>
        </section>
        
        <section xml:id="zym.view.helpers.navigation.menu">
            <title>Menu Helper</title>
            
            <para>
                The menu helper is used for rendering navigation containers
                as an HTML menu, by using <code>ul</code> and <code>li</code>
                elements. How the HTML should be presented is easily configurable
                by using CSS.
            </para>
            
            <para>
                Methods in the menu helper:
            </para>
            
            <itemizedlist>
               <listitem>
                   <para>
                       <code>{get|set}UlClass()</code> gets/sets the CSS class
                       used in <code>renderMenu()</code>.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}ParentActive()</code> gets/sets a flag
                       specifying whether a parent page should be rendered
                       as active if a child page is active.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}Partial()</code> gets/sets a partial view
                       script that should be used for rendering menu.
                       If a partial view script is set, the helper's 
                       <code>render()</code> method will use the 
                       <code>renderPartial()</code> method. If no partial is
                       set, the <code>renderMenu()</code> method is used.
                       The helper expects the partial to be a <code>string</code>
                       or an <code>array</code> with two elements. If the partial
                       is a <code>string</code>, it denotes the name of the partial
                       script to use. If it is an <code>array</code>, the first
                       element will be used as the name of the partial view 
                       script, and the second element is the module where the
                       script is found.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>htmlify()</code> overrides the method from the
                       abstract class to return <code>span</code> elements
                       if the page has no <code>href</code>. 
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>renderMenu()</code> is the default render method. 
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>renderPartial()</code> is used for rendering 
                       using a partial view script.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>renderSubMenu()</code> finds the deepest active
                       page and renders a menu of a) its child pages, if any, or
                       b) the parent page, if any. 
                   </para>
               </listitem>
           </itemizedlist>
    
            <example xml:id="zym.view.helpers.navigation.menu.example1">
                <title>Rendering a menu</title>
                
                <para>
                    This example shows how to render a menu from a container
                    registered/found in the view helper. Notice how pages 
                    are filtered out based on visibility and ACL.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/menu_1.php" parse="text" /></programlisting>
            </example>
    
            <example xml:id="zym.view.helpers.navigation.menu.example2">
                <title>Rendering a custom menu</title>
                
                <para>
                    This example shows how to render a menu that is not
                    registered in the view helper.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/menu_2.php" parse="text" /></programlisting>
            </example>
    
            <example xml:id="zym.view.helpers.navigation.menu.example3">
                <title>Rendering a sub menu</title>
                
                <para>
                    This example shows how the <code>renderSubMenu()</code> 
                    method works.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/menu_3.php" parse="text" /></programlisting>
            </example>
    
            <example xml:id="zym.view.helpers.navigation.menu.example4">
                <title>Rendering a custom menu using a partial view script</title>
                
                <para>
                    This example shows how to render a custom menu using
                    a partial vew script. By calling <code>setPartial()</code>,
                    you can specify a partial view script that will be used
                    when calling <code>render()</code>. When a partial is specified,
                    the <code>renderPartial()</code> method will be called. This
                    method will assign the container to the view with the key
                    <code>container</code>.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/menu_4.php" parse="text" /></programlisting>
            </example>
        </section>
        
        <section xml:id="zym.view.helpers.navigation.sitemap">
            <title>Sitemap Helper</title>
            
            <para>
                The sitemap helper is used for generating XML sitemaps, as 
                defined by the <link xlink:href="http://www.sitemaps.org/protocol.php">Sitemaps XML format</link>.
                XML sitemaps can be used to have detailed control of how a search engine
                should index your site.
            </para>
            
            <para>
                By default, the sitemap helper uses Zym's
                <link xlink:href="#zym.validate.sitemap">sitemap validators</link>
                to validate each element that is used. This can be disabled by
                calling <code>$helper->setUseSitemapValidators(false)</code>.
                
                <note>
                    <para>
                        If you disable sitemap validators, the custom properties (see table)
                        are not validated at all.
                    </para>
                </note>
            </para>
            
            <para>
                The sitemap helper also supports 
                <link xlink:href="http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">Sitemap XSD Schema</link> 
                validation of the generated sitemap. This is disabled by default,
                since it will require a request to the Schema file. It can be
                enabled with 
                <code>$helper->setUseSchemaValidation(true)</code>.
            </para>
    
            <table xml:id="zym.view.helpers.navigation.sitemap.elements">
                <title>Sitemap XML elements</title>
                        
                <info>
                    <abstract>
                        <para>
                            The following elements/properties can be used for each
                            page in the sitemap. The only required element is the
                            <code>loc</code> element.
                        </para>
                    </abstract>
                </info>               
        
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>Element</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    
                    <tbody>
                        <row>
                            <entry><code>loc</code></entry>
                            <entry>
                                Absolute URL to page. An absolute URL will
                                be generated by the helper.
                            </entry>
                        </row>
                        <row>
                            <entry><code>lastmod</code></entry>
                            <entry>
                                <para>
                                    The date of last modification of the file,
                                    in <link xlink:href="http://www.w3.org/TR/NOTE-datetime">W3C Datetime</link> format.
                                    This time portion can be omitted if desired, and only use YYYY-MM-DD.
                                </para>
                                <para>
                                    The helper will try to retrieve the
                                    <code>lastmod</code> value from the page's
                                    custom property <code>lastmod</code> if it
                                    is set in the page. If the value is not a
                                    valid date, it is ignored.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><code>changefreq</code></entry>
                            <entry>
                                <para>
                                    How frequently the page is likely to change. 
                                    This value provides general information to 
                                    search engines and may not correlate exactly 
                                    to how often they crawl the page. Valid 
                                    values are:
                                    <itemizedlist>
                                        <listitem><para>always</para></listitem>
                                        <listitem><para>hourly</para></listitem>
                                        <listitem><para>daily</para></listitem>
                                        <listitem><para>weekly</para></listitem>
                                        <listitem><para>monthly</para></listitem>
                                        <listitem><para>yearly</para></listitem>
                                        <listitem><para>never</para></listitem>
                                    </itemizedlist>
                                </para>
                                <para>
                                    The helper will try to retrieve the
                                    <code>changefreq</code> value from the page's
                                    custom property <code>changefreq</code> if it
                                    is set in the page. If the value is not 
                                    valid, it is ignored.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><code>priority</code></entry>
                            <entry>
                                <para>
                                    The priority of this URL relative to other 
                                    URLs on your site. Valid values range from 
                                    0.0 to 1.0. 
                                </para>
                                <para>
                                    The helper will try to retrieve the
                                    <code>priority</code> value from the page's
                                    custom property <code>priority</code> if it
                                    is set in the page. If the value is not 
                                    valid, it is ignored.
                                </para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            
            <para>
                Methods in the sitemap helper:
            </para>
            
            <itemizedlist>
               <listitem>
                   <para>
                       <code>{get|set}MaxDepth()</code> gets/sets the maximum
                       depth a container should be traversed. Pages below will
                       not be included in the rendered sitemap. Default is
                       <code>null</code>, which means no max depth.
                   </para>
               </listitem>
               <listitem>
                    <para>
                        <code>{get|set}FormatOutput()</code> gets/sets a flag
                        indicating whether XML output should be formatted. This
                        corresponds to the <code>formatOutput</code> property
                        of the native <classname>DOMDocument</classname> class.
                        Read more at 
                        <link xlink:href="http://php.net/domdocument">PHP: DOMDocument - Manual</link>.
                        Default is <code>false</code>.
                    </para>
               </listitem>
               <listitem>
                    <para>
                        <code>{get|set}UseXmlDeclaration()</code> gets/sets a
                        flag indicating whether the XML declaration should be
                        included when rendering. Default is <code>true</code>.
                    </para>
               </listitem>
               <listitem>
                    <para>
                        <code>{get|set}UseSitemapValidators()</code> gets/sets a
                        flag indicating whether sitemap validators should be 
                        used when generating the DOM sitemap. Default is
                        <code>true</code>.
                    </para>
               </listitem>
               <listitem>
                    <para>
                        <code>{get|set}UseSchemaValidation()</code> gets/sets a
                        flag indicating whether the helper should use XML Schema
                        validation when generating the DOM sitemap. Default is
                        <code>false</code>. If <code>true</code>.
                    </para>
               </listitem>
               <listitem>
                    <para>
                        <code>{get|set}ServerUrl()</code> gets/sets server URL
                        that will be prepended to non-absolute URLs in the
                        <code>url()</code> method. If no server URL is specified,
                        it will be determined by the helper.
                    </para>
               </listitem>
               <listitem>
                    <para>
                        <code>url()</code> is used to generate absolute URLs to
                        pages. 
                    </para>
               </listitem>
               <listitem>
                    <para>
                        <code>getDomSitemap()</code> generates a DOMDocument
                        from a given container. 
                    </para>
               </listitem>
           </itemizedlist>
    
            <example xml:id="zym.view.helpers.navigation.sitemap.example">
                <title>Rendering an XML sitemap</title>
                
                <para>
                    This example shows how to render an XML sitemap based
                    on the setup we did further up.
                </para>
                
                <programlisting role="php"><xi:include href="helpers/example/navigation/sitemap.php" parse="text" /></programlisting>
                
                <para>
                    Notice how pages that are invisible or pages with 
                    ACL roles incompatible with the view helper are filtered
                    out:
                </para>
                
                <programlisting role="xml"><xi:include href="helpers/example/navigation/sitemap.xml" parse="text" /></programlisting>
            </example>
            
        </section>
        
        <section xml:id="zym.view.helpers.navigation.navigation">
            <title>Navigation Helper</title>
            
            <para>
                The navigation helper is a proxy helper
                that relays calls to other navigational helpers. It can be
                considered an entry point to all navigation-related view tasks.
                The aforementioned navigational helpers are in the namespace 
                <code>Zym_View_Helper_Navigation</code>, and would thus require 
                the path <code>Zym/View/Helper/Navigation</code> to be added as 
                a helper path to the view. With the proxy helper residing in the
                <code>Zym_View_Helper</code> namespace, it will always be 
                available, without the need to add any helper paths to the view.
            </para>
            
            <para>
                The navigation helper finds other helpers that implement the
                <classname>Zym_View_Helper_Navigation_Interface</classname>
                interface, which means custom view helpers can also be proxied.
                This would, however, require that the custom helper path is added
                to the view.
            </para>
            
            <para>
                When proxying to other helpers, the navigation helper can inject
                its container, ACL/role, and translator. This means that you
                won't have to explicitly set all three in all navigational 
                helpers, nor resort to injecting by means of 
                <classname>Zend_Registry</classname> or static methods.
            </para>
            
            <itemizedlist>
               <listitem>
                   <para>
                       <code>findHelper()</code> finds the given helper, 
                       verifies that it is a navigational helper, and injects
                       container, ACL/role and translator.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}InjectContainer()</code> gets/sets a flag
                       indicating whether the container should be injected to
                       proxied helpers. Default is <code>true</code>.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}InjectAcl()</code> gets/sets a flag
                       indicating whether the ACL/role should be injected to
                       proxied helpers. Default is <code>true</code>.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}InjectTranslator()</code> gets/sets a flag
                       indicating whether the translator should be injected to
                       proxied helpers. Default is <code>true</code>.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>{get|set}DefualtProxy()</code> gets/sets the default
                       proxy. Default is <code>'menu'</code>.
                   </para>
               </listitem>
               <listitem>
                   <para>
                       <code>render()</code> proxies to the render method of
                       the default proxy. 
                   </para>
               </listitem>
           </itemizedlist>
        </section>
    </section>
    
    <section xml:id="zym.view.helpers.timesince">
        <title>TimeSince Helper</title>
        
        <para>
            This helper calculates the time passed from timestamps to generate a 
            formatted string like "5 days and 4 hours". Applications of this helper
            are generally seen in "Created 2 weeks ago" or "Last modified 5 minutes ago"
            type lines.
        </para>
        
        <para>
            Units supported are years, months, weeks, days, minutes, seconds. String format
            is the largest possible unit and if possible the unit below it. If a 1 year and 2 weeks
            have passed then "1 year" is the output; however, if 1 year, 2 months and 5 days have passed then
            "1 year and 2 months" is returned. If less than a second have passed then "less than a second" is 
            returned.
        </para>
        
        <para>
            Output is automatically translated if possible using <code>Zend_View_Helper_Translate</code>.
            The translation format is '%d months'. An already completed gettext pot file is located
            on Zym's demo in the data locale folder.
        </para>
        
        <itemizedlist>
            <listitem><para>timeSince($timestamp, $time = null)</para></listitem>
        </itemizedlist>
        
        <example xml:id="zym.view.helpers.timesince.example">
            <title>Using Zym_View_Helper_TimeSince</title>
            
            <programlisting role="php"><xi:include href="helpers/example/timesince.php" parse="text" /></programlisting>
        </example>
    </section>
    
    <section xml:id="zym.view.helpers.timeuntil">
        <title>TimeUntil Helper</title>
        
        <para>
            This helper calculates the time to an event from timestamps to generate a 
            formatted string like "5 days and 4 hours". It is similar to the TimeSince helper except applications of this helper
            are generally seen in "This event will start in 5 days and 4 hours" or "3 weeks before expiration"
            type lines.
        </para>
        
        <para>
            Units supported are years, months, weeks, days, minutes, seconds. String format
            is the largest possible unit and if possible the unit below it. If a 1 year and 2 weeks
            have passed then "1 year" is the output; however, if 1 year, 2 months and 5 days have passed then
            "1 year and 2 months" is returned. If less than a second have passed then "less than a second" is 
            returned.
        </para>
        
        <para>
            Output is automatically translated if possible using <code>Zend_View_Helper_Translate</code>.
            The translation format is '%d months'. An already completed gettext pot file is located
            on Zym's demo in the data locale folder.
        </para>
        
        <itemizedlist>
            <listitem><para>timeUntil($timestamp, $time = null)</para></listitem>
        </itemizedlist>
        
        <example xml:id="zym.view.helpers.timeuntil.example">
            <title>Using Zym_View_Helper_TimeUntil</title>
            
            <programlisting role="php"><xi:include href="helpers/example/timeuntil.php" parse="text" /></programlisting>
        </example>
    </section>
    
    <section xml:id="zym.view.helpers.xmldeclaration">
        <title>XmlDeclaration Helper</title>
        
        <para>
            The xml declaration helper generates xml declarations (<![CDATA[<?xml version="1.0" ?>]]>) just like its
            name suggests. Whenever you are using PHP for templates, you should
            use the xmlDeclaration helper because of inconsistencies between environments.
            You'll never know if short tags is enabled or not which can cause
            errors with xml declarations.
        </para>

        <itemizedlist>
            <listitem><para>xmlDeclaration($version = '1.0', $encoding = 'UTF-8', $standalone = null)</para></listitem>
        </itemizedlist>

        <example xml:id="zym.view.helpers.xmldeclaration.example">
            <title>Using Zym_View_Helper_XmlDeclaration</title>
            
            <programlisting role="php"><xi:include href="helpers/example/xmldeclaration.php" parse="text" /></programlisting>
        </example>
    </section>
</section>