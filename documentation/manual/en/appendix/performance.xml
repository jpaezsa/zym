<?xml version="1.0" encoding="UTF-8"?>
<appendix xmlns="http://docbook.org/ns/docbook" 
          xmlns:xlink="http://www.w3.org/1999/xlink" 
          xmlns:xi="http://www.w3.org/2001/XInclude" 
          xml:lang="en"
          xml:id="appendix.performance"
          version="5.0">
    <title>Performance Optimization</title>
    
    <para>
        This document describes some methods to increase performance in your Zend Framework based applications.
    </para>
    
    <para>
        Performance is an important aspect of almost every application. Inefficient
        SQL queries and costly algorithms can be a show stopper. When designing an app
        you should keep performance in mind, but not let it overtake you. Pre-optimization
        is the root of all evil! Remember that you need something that's actually usable before you need performance.
        There is more than one aspect to performance as external influences such as the network
        can have a significant effect. Aside from code,
        webserver configuration does makes a big difference.
    </para>
    
    <para>
        Watch those SQL queries as using an ORM can mask inefficient queries. The profiler is your friend.
        Profile often throughout development to spot any problems that could occur.
        Caching is always easier to implement during development. Use caching wisely, 
        don't go overboard caching every little thing. Focus on the database or your
        datasources.
    </para>
    
    <para>
        Use an opcode cache! If you aren't using an opcode cache, you probably don't
        care much about performance. Opcode caches optimizes and caches compiled php code
        so the same code does not have to be compiled by php every request before execution.
        There are a variety of opcode caches out there, but
        the best supported is <link xlink:href="http://php.net/apc">APC Opcode Cache</link>.
        APC tuning is also a tricky process, but you'll love the benefits.
    </para>
    
    <section xml:id="appendix.performance.prerequire">
        <title>Pre-requiring often used files</title>
        <para>
            Some often used files, like the ViewRenderer, are included inside a class method. 
            On hosts where opcode caches like APC aren't enabled this increases performances.
            However, on hosts where opcode caches are enabled this actually decreses performance.
            APC works in two stages of PHP, the first is when files are pre-required and are not
            inside conditional statements. At this stage, PHP itself has not parsed or executed the 
            current file. APC has the change to perform optimzation of the code and link the required
            file with the current one. The next stage is when php code is executed, while APC cannot
            preload resources, it can still cache compile files. So if your using autoloading, you
            still get most of the benefits. As time passes, this may not be as relevant.
        </para>
        
        <para>
            One way of speeding things up when using an opcode cache is by including often used 
            files in you bootstrap. The script below will output all files that are currently
            used. Run this inside a generic controller in your application to get an idea
            of the files that your application requires every request. You can then use that
            list in your bootstrap to pre-require files that may never have APC's optimization
            due to conditional loading or autoloading.
        </para>
        
        <programlisting role="php"><![CDATA[
$classes = array_merge(get_declared_interfaces(), get_declared_classes());
foreach ($classes as $class) {;
    if (strtolower(substr($class, 0, 4)) == 'zend' 
        || strtolower(substr($class, 0, 3)) == 'zym') {
       $file = str_ireplace('_', '/', $class) . '.php';
       
       echo 'require_once \'' . $file . '.php\';' . '<br />';
    }
}
]]></programlisting>
    </section>
    
    <section xml:id="appendix.performance.stat">
        <title>Disabling APC stat with ZF</title>
        
        <para>
            The <emphasis>apc.stat = Off</emphasis> setting in APC tells PHP to ignore all
            file includes and requires. Improper usage of this option often leads to white pages
            or cryptic and wierd PHP exceptions. What this setting does is on the first
            run, APC stores looks for and stores all includes/requires declared
            and on the next request, PHP will ignore all file includes/requires. Okay, so now your thinking
            that this is simple, but the catch is that all includes/requires
            must be absolute (from /). Because most, perhaps every library does not
            use absolute paths, generally for most people, this setting will cause problems; however,
            if you use a script to replace the relative paths with absolute paths, a performance improvement 
            of up to the APC advertised 30% can be achieved.
        </para>
    </section>
    
    <section xml:id="appendix.performance.autoloading">
        <title>Autoloading ZF and Zym</title>
        
        <para>
            Switching from the ZF and Zym default of requires to autoloading is fairly simple
            but it requires that you keep a separate custom copy of the libraries.
            Running the script below on the library files will remove all references to
            requires allowing you to use autoloading as you choose.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$directories = array(
    '../library/Zend',
    '../library/Zym'
);

foreach ($directories as $directory) {
    $iterator = new RecursiveDirectoryIterator($directory);

    foreach(new RecursiveIteratorIterator($iterator) as $file) {
        if ($file->isFile() && substr($file, -4) == '.php') {
            $contents = file_get_contents($file);
            $contents = preg_replace('/[\t\r]*require_once\s+?[(\'"].+?;[\t\r]*/six', '', $contents);
            $fh = fopen($file, 'w');
            fwrite($fh, $contents);
            fclose($fh);
        }
    }
}]]></programlisting>
    </section>
    
    <section xml:id="appendix.performance.autoloadingargument">
        <title>The Autoloading VS. Requires Argument</title>
        
        <para>
            Autoloading is the process of lazy loading dependencies whenever they
            are needed, while on the otherhand the traditional require declaration
            is considered the wasteful style where dependencies are loaded immediately.
            While these are the definitions, these are the extremes. ZF uses a mixture
            of the two styles. Generally most files that are always needed are "required"
            in the file header where opcode caches like APC can pick them up and other
            dependencies that are not needed on every request such as exceptions or adapters
            are loaded conditionally.
        </para>
        
        <section xml:id="appendix.performance.autoloadingargument.faster">
            <title>So which one is better?</title>
            
            <para>
                
            </para>
        </section>
    </section>
</appendix>